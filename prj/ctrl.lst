C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:50:21 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CTRL
OBJECT MODULE PLACED IN .\ctrl.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE ..\code\ctrl.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\ctrl.lst) OBJECT(.\c
                    -trl.obj)

line level    source

   1          #include "include.h"
   2          
   3          const INT8U DefaultKeyABuf[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
   4          
   5          INT8U CardRevBuf[16] = { 0 };
   6          INT8U const CardKeyABlockBuf[16] = {
   7                                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   8                                                                          0xff,0x07,0x80,0x69,
   9                                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     
  10                                                                          };
  11          
  12          INT8U CtrlMode = CTRL_BOARD_MODE;   //CTRL_PC_MODE    CTRL_BOARD_MODE
  13          INT8U OptMode  = OPT_INC_MODE;
  14          INT8U bPass = 1; bWarn = 0;
  15          INT8U LedOnType = LED_LONG;
  16          
  17          int CARDREDUCE = 2;
  18          int CARDADD = 10;
  19          
  20          
  21          void pass( void )
  22          {
  23   1              LED_ON;
  24   1              BEEP_ON;
  25   1              delay_ms(2000);
  26   1              BEEP_OFF;
  27   1              LED_OFF;
  28   1      }
  29          
  30          void warn(void)
  31          {
  32   1              INT8U i;
  33   1              
  34   1              LED_OFF;
  35   1              for( i = 0; i < 3; i++ )
  36   1              {
  37   2                      LED_ON;
  38   2                      BEEP_ON;
  39   2                      delay_ms(200);
  40   2                      BEEP_OFF;
  41   2                      LED_OFF;
  42   2                      delay_ms(200);
  43   2              }
  44   1      }
  45          
  46          void cal_keyA( INT8U *DestBuf )
  47          {
  48   1              const INT8U KeyABuf[] = { 0x20, 0x12, 0x10, 0x01, 0x00, 0x00 };
  49   1      
  50   1              memcpy( DestBuf, KeyABuf, 6 );
  51   1      }
  52          
  53          void send_rebck( psUartData psUartDataRevSend )
  54          {
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:50:21 PAGE 2   

  55   1              INT8U * pTmp;
  56   1              INT8U Len,Check;
  57   1              INT8U i;
  58   1      
  59   1              Len = psUartDataRevSend->UartCmdLen     + psUartDataRevSend->UartDataLen + 2;
  60   1              pTmp = ( INT8U * )psUartDataRevSend;
  61   1      
  62   1              send_byte( 0xFC );
  63   1              delay_ms(10);
  64   1              Check = 0xFC;
  65   1              for( i = 0; i < Len; i++ )
  66   1              {
  67   2                      send_byte( *pTmp );
  68   2                      delay_ms(10);
  69   2                      Check ^= *pTmp++;
  70   2              }
  71   1              send_byte( Check );     
  72   1              delay_ms(10);
  73   1      }
  74          
  75          void uart_over( void )
  76          {
  77   1              UartCount = 0;
  78   1              UartStart = FALSE;
  79   1              UartComp = FALSE;
  80   1      }
  81          
  82          INT8U check_com( psUartData psUartDataRevSend )
  83          {
  84   1              psUartDataRevSend->UartDataBuf[0] = 0xAA;
  85   1      
  86   1              return TRUE;
  87   1      }
  88          
  89          INT8U req_card_sn( psUartData psUartDataRevSend )
  90          {
  91   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
  92   1              {
  93   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
  94   2                      {
  95   3                              psUartDataRevSend->UartErrCode = ERROR_NOCARD;
  96   3                              memset( psUartDataRevSend->UartDataBuf, 0x00, psUartDataRevSend->UartDataLen );
  97   3                              bWarn = 1;
  98   3                              return FALSE;
  99   3                      }       
 100   2              }
 101   1              
 102   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
 103   1              {
 104   2                      psUartDataRevSend->UartErrCode = ERROR_ATCLL;
 105   2                      memset( psUartDataRevSend->UartDataBuf, 0x00, psUartDataRevSend->UartDataLen );
 106   2                      bWarn = 1;
 107   2                      return FALSE;   
 108   2              }
 109   1      
 110   1              memcpy( psUartDataRevSend->UartDataBuf, &CardRevBuf[2], 4 );
 111   1      
 112   1              bPass = 1;
 113   1      
 114   1              return TRUE;
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:50:21 PAGE 3   

 115   1      }
 116          
 117          INT8U updata_key( psUartData psUartDataRevSend )
 118          {
 119   1              INT8U CardKeyABuf[6];
 120   1              INT8U KeyBlockAddr;
 121   1      
 122   1              psUartDataRevSend->UartDataLen = 7;
 123   1              KeyBlockAddr = psUartDataRevSend->UartDataBuf[0];
 124   1      
 125   1              if( KeyBlockAddr % 4 != 3 )
 126   1              {
 127   2                      psUartDataRevSend->UartErrCode = ERROR_BLOCK_ADDR;
 128   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 129   2                      bWarn = 1;
 130   2                      return FALSE;   
 131   2              }
 132   1      
 133   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
 134   1              {
 135   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
 136   2                      {
 137   3                              psUartDataRevSend->UartErrCode = ERROR_NOCARD;
 138   3                              memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 139   3                              bWarn = 1;
 140   3                              return FALSE;
 141   3                      }       
 142   2              }
 143   1      
 144   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
 145   1              {
 146   2                      psUartDataRevSend->UartErrCode = ERROR_ATCLL;
 147   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 148   2                      bWarn = 1;
 149   2                      return FALSE;   
 150   2              }
 151   1      
 152   1              if( PcdSelect( &CardRevBuf[2] ) != MI_OK )//Ñ¡¿¨
 153   1              {
 154   2                      psUartDataRevSend->UartErrCode = ERROR_SLCT;
 155   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 156   2                      bWarn = 1;
 157   2                      return FALSE;
 158   2              }
 159   1      
 160   1              memcpy( CardKeyABuf, &psUartDataRevSend->UartDataBuf[1], 6 );
 161   1      
 162   1              if( PcdAuthState( PICC_AUTHENT1A, KeyBlockAddr, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 163   1              {
 164   2                      psUartDataRevSend->UartErrCode = ERROR_KEYA_IC;
 165   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 166   2                      bWarn = 1;
 167   2                      return FALSE;   
 168   2              }
 169   1      
 170   1              memcpy( CardKeyABlockBuf, &psUartDataRevSend->UartDataBuf[7], 6 );
 171   1      
 172   1              if( PcdWrite( KeyBlockAddr, CardKeyABlockBuf ) != MI_OK )// Ð´¿¨
 173   1              {
 174   2                      psUartDataRevSend->UartErrCode = ERROR_WRITE_IC;
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:50:21 PAGE 4   

 175   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 176   2                      bWarn = 1;
 177   2                      return FALSE;
 178   2              }
 179   1      
 180   1              memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 181   1              bPass = 1;
 182   1              return TRUE;
 183   1      }
 184          
 185          INT8U block_write( psUartData psUartDataRevSend )
 186          {
 187   1              INT8U CardWriteBuf[16];
 188   1              INT8U CardKeyABuf[6];
 189   1              INT8U KeyBlockAddr;
 190   1      
 191   1              psUartDataRevSend->UartDataLen = 0x11;
 192   1              KeyBlockAddr = psUartDataRevSend->UartDataBuf[0];
 193   1      
 194   1              if( KeyBlockAddr % 4 == 3 )
 195   1              {
 196   2                      psUartDataRevSend->UartErrCode = ERROR_BLOCK_ADDR;
 197   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 198   2                      bWarn = 1;
 199   2                      return FALSE;   
 200   2              }
 201   1      
 202   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
 203   1              {
 204   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
 205   2                      {
 206   3                              psUartDataRevSend->UartErrCode = ERROR_NOCARD;
 207   3                              memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 208   3                              bWarn = 1;
 209   3                              return FALSE;
 210   3                      }       
 211   2              }
 212   1      
 213   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
 214   1              {
 215   2                      psUartDataRevSend->UartErrCode = ERROR_ATCLL;
 216   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 217   2                      bWarn = 1;
 218   2                      return FALSE;   
 219   2              }
 220   1      
 221   1              if( PcdSelect( &CardRevBuf[2] ) != MI_OK )//Ñ¡¿¨
 222   1              {
 223   2                      psUartDataRevSend->UartErrCode = ERROR_SLCT;
 224   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 225   2                      bWarn = 1;
 226   2                      return FALSE;
 227   2              }
 228   1      
 229   1              memcpy( CardKeyABuf, &psUartDataRevSend->UartDataBuf[1], 6 );
 230   1      
 231   1              if( PcdAuthState( PICC_AUTHENT1A, KeyBlockAddr, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 232   1              {
 233   2                      psUartDataRevSend->UartErrCode = ERROR_KEYA_IC;
 234   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:50:21 PAGE 5   

 235   2                      bWarn = 1;
 236   2                      return FALSE;   
 237   2              }
 238   1      
 239   1              memcpy( CardWriteBuf, &psUartDataRevSend->UartDataBuf[7], 16 );
 240   1              if( PcdWrite( KeyBlockAddr, CardWriteBuf ) != MI_OK )//Ð´¿¨
 241   1              {
 242   2                      psUartDataRevSend->UartErrCode = ERROR_WRITE_IC;
 243   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 244   2                      bWarn = 1;
 245   2                      return FALSE;
 246   2              }
 247   1              bPass = 1;
 248   1              
 249   1              return TRUE;
 250   1      }
 251          
 252          INT8U block_read( psUartData psUartDataRevSend )
 253          {
 254   1              INT8U CardReadBuf[16];
 255   1              INT8U CardKeyABuf[6];
 256   1              INT8U KeyBlockAddr;
 257   1      
 258   1              psUartDataRevSend->UartDataLen = 0x11;
 259   1              KeyBlockAddr = psUartDataRevSend->UartDataBuf[0];
 260   1      
 261   1              if( KeyBlockAddr % 4 == 3 )
 262   1              {
 263   2                      psUartDataRevSend->UartErrCode = ERROR_BLOCK_ADDR;
 264   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 265   2                      bWarn = 1;
 266   2                      return FALSE;   
 267   2              }
 268   1      
 269   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
 270   1              {
 271   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
 272   2                      {
 273   3                              psUartDataRevSend->UartErrCode = ERROR_NOCARD;
 274   3                              memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 275   3                              bWarn = 1;
 276   3                              return FALSE;
 277   3                      }       
 278   2              }
 279   1      
 280   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
 281   1              {
 282   2                      psUartDataRevSend->UartErrCode = ERROR_ATCLL;
 283   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 284   2                      bWarn = 1;
 285   2                      return FALSE;   
 286   2              }
 287   1      
 288   1              if( PcdSelect( &CardRevBuf[2] ) != MI_OK )//Ñ¡¿¨
 289   1              {
 290   2                      psUartDataRevSend->UartErrCode = ERROR_SLCT;
 291   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 292   2                      bWarn = 1;
 293   2                      return FALSE;
 294   2              }
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:50:21 PAGE 6   

 295   1      
 296   1              memcpy( CardKeyABuf, &psUartDataRevSend->UartDataBuf[1], 6 );
 297   1      
 298   1              if( PcdAuthState( PICC_AUTHENT1A, KeyBlockAddr, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 299   1              {
 300   2                      psUartDataRevSend->UartErrCode = ERROR_KEYA_IC;
 301   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 302   2                      bWarn = 1;
 303   2                      return FALSE;   
 304   2              }
 305   1      
 306   1              if( PcdRead( KeyBlockAddr, CardReadBuf ) != MI_OK )// ¶Á¿¨
 307   1              {
 308   2                      psUartDataRevSend->UartErrCode = ERROR_READ_IC;
 309   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 310   2                      bWarn = 1;
 311   2                      return FALSE;
 312   2              }
 313   1              memcpy( &psUartDataRevSend->UartDataBuf[1], CardReadBuf, 16 );
 314   1              bPass = 1;
 315   1                              
 316   1              return TRUE;
 317   1      }
 318          
 319          void display_error( void )
 320          {
 321   1              lcdMsg("³ÌÐò³ö´í", 1, 3 );
 322   1              lcdMsg("----", 4, 3);
 323   1      }
 324          
 325          void display_no_id( void )
 326          {
 327   1          char DisplayBuf[10];
 328   1          memset(DisplayBuf,0,10);
 329   1      
 330   1              switch(OptMode )
 331   1              {
 332   2                      case OPT_INC_MODE:
 333   2                              lcdMsg("Ïû·ÑÄ£Ê½", 1, 3 );
 334   2                              lcdMsg("Ïû·Ñ£º",3,0);
 335   2                              sprintf(DisplayBuf,"%d.00",CARDREDUCE);
 336   2                              lcdMsg(DisplayBuf , 3, 3 );
 337   2                              break;
 338   2      
 339   2                      case OPT_ADD_MODE:
 340   2                              lcdMsg("³äÖµÄ£Ê½", 1, 3 );
 341   2                              lcdMsg("³äÖµ£º",3,0);
 342   2                              sprintf(DisplayBuf,"%d.0",CARDADD);
 343   2                              lcdMsg(DisplayBuf , 3, 3 );
 344   2                              break;
 345   2      
 346   2                      case OPT_READ_MODE:
 347   2                              lcdMsg("¶Á¿¨Ä£Ê½", 1, 3 );
 348   2                              lcdMsg("¶Á¿¨£º----",3,0);
 349   2                              break;
 350   2      
 351   2                      case OPT_REG_MODE:
 352   2                              lcdMsg("¿ª¿¨Ä£Ê½", 1, 3 );
 353   2                              lcdMsg("¿ª¿¨£º----",3,0);
 354   2                              break;
 355   2                      default:
 356   2                              break;
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:50:21 PAGE 7   

 357   2              }
 358   1      }
 359          
 360          void display_money( INT32U CardMoney )
 361          {
 362   1              char DisplayBuf[10];
 363   1              char *pDisplayChar;
 364   1              INT32U Tmp;
 365   1      
 366   1              pDisplayChar = DisplayBuf;
 367   1      
 368   1              if( CardMoney > 9999 )  //×î´óÏÔÊ¾9999
 369   1              {
 370   2                      CardMoney = 9999;
 371   2              }
 372   1      
 373   1              Tmp = CardMoney;
 374   1      
 375   1              *pDisplayChar++ = Tmp / 1000 + '0';
 376   1              Tmp %= 1000;
 377   1              *pDisplayChar++ = Tmp / 100 + '0';
 378   1              Tmp %= 100;
 379   1              *pDisplayChar++ = Tmp / 10 + '0';
 380   1              Tmp %= 10;
 381   1              *pDisplayChar++ = Tmp + '0';
 382   1              *pDisplayChar++ = '\0';
 383   1      
 384   1              lcdMsg(DisplayBuf, 4, 3 );
 385   1      }
 386          
 387          void display_id( INT8U * SrcBuf )
 388          {
 389   1              char DisplayBuf[10];
 390   1              char *pDisplayChar;
 391   1              INT8U Tmp, i;
 392   1      
 393   1              pDisplayChar = DisplayBuf;
 394   1      
 395   1              for( i = 0; i < 4; i++ )
 396   1              {
 397   2                      Tmp = ( ( *SrcBuf ) >> 4 ) & 0x0F;      
 398   2                      if( ( Tmp >=0 ) && ( Tmp <= 9 ) )
 399   2                      {
 400   3                              *pDisplayChar ++ = '0' + Tmp;   
 401   3                      }
 402   2                      else
 403   2                      {
 404   3                              *pDisplayChar ++ = 'A' + Tmp - 10;
 405   3                      }
 406   2      
 407   2                      Tmp = ( *SrcBuf ) & 0x0F;       
 408   2                      if( ( Tmp >=0 ) && ( Tmp <= 9 ) )
 409   2                      {
 410   3                              *pDisplayChar ++ = '0' + Tmp;   
 411   3                      }
 412   2                      else
 413   2                      {
 414   3                              *pDisplayChar ++ = 'A' + Tmp - 10;
 415   3                      }
 416   2      
 417   2                      SrcBuf ++;
 418   2              }
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:50:21 PAGE 8   

 419   1              *pDisplayChar ++ = '\0';
 420   1      
 421   1              lcdMsg(DisplayBuf, 2, 3 );
 422   1      }
 423          
 424          INT8U ctrl_by_pc( psUartData psUartDataRevSend )
 425          {
 426   1              psUartDataRevSend = psUartDataRevSend;
 427   1      
 428   1              CtrlMode = CTRL_PC_MODE;
 429   1              
 430   1              lcdMsg("À¶ÑÀ¿ØÖÆ", 1, 3 );
 431   1              lcdMsg("----", 4, 3);
 432   1              lcdMsg("----", 3, 3);
 433   1              return TRUE;    
 434   1      }
 435          
 436          INT8U ctrl_by_board( psUartData psUartDataRevSend )
 437          {
 438   1              psUartDataRevSend = psUartDataRevSend;
 439   1              
 440   1              CtrlMode = CTRL_BOARD_MODE;
 441   1      
 442   1              display_no_id();
 443   1              
 444   1              return TRUE;    
 445   1      }
 446          
 447          void pc_process( void )
 448          {
 449   1              psUartData psUartDataRevSend;
 450   1              INT8U i;
 451   1              INT8U Check = 0xFE;
 452   1              INT8U Len;
 453   1      
 454   1              if( UartComp != TRUE )
 455   1              {
 456   2                      return;
 457   2              }
 458   1      
 459   1              psUartDataRevSend = (psUartData)UartBuf;
 460   1              Len = psUartDataRevSend->UartCmdLen + psUartDataRevSend->UartDataLen + 3;
 461   1      
 462   1              for( i = 0; i < ( Len - 1 ); i ++ )
 463   1              {
 464   2                      Check ^= UartBuf[i];
 465   2              }
 466   1              /*
 467   1              if( Check != UartBuf[Len - 1] )
 468   1              {
 469   1                      psUartDataRevSend->UartErrCode = ERROR_CHECK;
 470   1                      send_rebck( psUartDataRevSend );
 471   1                      uart_over();
 472   1                      return;
 473   1              }
 474   1              */
 475   1              
 476   1              switch( psUartDataRevSend->UartCmd )
 477   1              {       
 478   2                      case 0x0002:  //¼ì²â´®¿Ú×´Ì¬ -> fe 03 01 c1 c0 er 00 ck,  <- fc 03 01 c1 c0 er aa ck
 479   2                              check_com( psUartDataRevSend );
 480   2                              break;
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:50:21 PAGE 9   

 481   2                      case 0x0003: //²éÑ¯¿¨ºÅ  ->     fe 03 04 c1 c0 er 00 00 00 00 ck, <- fc 03 04 c1 c0 er sn3 sn2 sn1 sn0 ck
 482   2                              req_card_sn( psUartDataRevSend );
 483   2                              break;
 484   2      
 485   2                      case 0x0110: //ÐÞ¸ÄÃÜÂë·½Ê½0 fe 03 0d c1 c0 er kn o5 o4.. o0 n5 n4.. n0 ck, <-fe 03 07 c1 c0 er kn n5 n4
             -.. n0 ck        
 486   2                              updata_key( psUartDataRevSend ); //ÐÞ¸ÄÃÜÂë kn%4 == 3   
 487   2                              break;
 488   2      
 489   2                      case 0x0120: //¶ÁÊý¾Ý¿é·½Ê½0  -> fe 03 07 c1 c0 er kn ky5 ... ky0 ck, <- fc 03 11 c1 c0 er kn d15...d0 c
             -k 
 490   2                              block_read( psUartDataRevSend ); //¶ÁÊý¾Ý¿é kn%4 != 3   
 491   2                              break;
 492   2      
 493   2                      case 0x0130: //Ð´Êý¾Ý¿é·½Ê½0  -> fe 03 07 c1 c0 er kn ky5 ... ky0 ck, <- fc 03 11 c1 c0 er kn d15...d0 c
             -k 
 494   2                              block_write( psUartDataRevSend ); //¶ÁÊý¾Ý¿é kn%4 != 3  
 495   2                              break;
 496   2      
 497   2                      case 0x0140: //°å×Ó¿ØÖÆ
 498   2                              ctrl_by_board( psUartDataRevSend ); //¶ÁÊý¾Ý¿é kn%4 != 3        
 499   2                              break;  
 500   2                              
 501   2                      default:
 502   2                              psUartDataRevSend->UartErrCode = ERROR_NOCMD;   
 503   2                              break;
 504   2              }
 505   1              send_rebck( psUartDataRevSend );
 506   1              uart_over();
 507   1      }
 508          
 509          INT8U board_uart_event( void )
 510          {
 511   1              psUartData psUartDataRevSend;
 512   1              INT8U i;
 513   1              INT8U Check = 0xFE;
 514   1              INT8U Len;
 515   1              INT8U Result = FALSE;
 516   1      
 517   1              if( UartComp != TRUE )
 518   1              {
 519   2                      return Result;
 520   2              }
 521   1      
 522   1              psUartDataRevSend = (psUartData)UartBuf;
 523   1              Len = psUartDataRevSend->UartCmdLen + psUartDataRevSend->UartDataLen + 3;
 524   1      
 525   1              for( i = 0; i < ( Len - 1 ); i ++ )
 526   1              {
 527   2                      Check ^= UartBuf[i];
 528   2              }
 529   1              /*
 530   1              if( Check != UartBuf[Len - 1] )
 531   1              {
 532   1                      psUartDataRevSend->UartErrCode = ERROR_CHECK;
 533   1                      send_rebck( psUartDataRevSend );
 534   1                      uart_over();
 535   1                      return;
 536   1              }
 537   1              */
 538   1              
 539   1              switch( psUartDataRevSend->UartCmd )
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:50:21 PAGE 10  

 540   1              {       
 541   2                      case 0x0141:  //¼ÆËã»ú¿ØÖÆ
 542   2                              ctrl_by_pc( psUartDataRevSend );
 543   2                              Result = TRUE;
 544   2                              break;
 545   2                              
 546   2                      default:
 547   2                              psUartDataRevSend->UartErrCode = ERROR_NOCMD;   
 548   2                              break;
 549   2              }
 550   1              send_rebck( psUartDataRevSend );
 551   1              uart_over();
 552   1      
 553   1              return Result;
 554   1      }
 555          
 556          void board_process( void )
 557          {
 558   1              INT8U CardReadBuf[16];
 559   1              INT8U CardWriteBuf[16];
 560   1              INT8U CardKeyABuf[6];
 561   1              INT32U CardMoney;
 562   1              INT8U KeyVal;
 563   1      
 564   1      
 565   1              if( board_uart_event() == TRUE )   //¼ÆËã»ú¿ØÖÆ
 566   1              {
 567   2                      return;
 568   2              }
 569   1      
 570   1              KeyVal = get_key();
 571   1              switch( KeyVal )
 572   1              {
 573   2                      case KEY_1:
 574   2                              OptMode = OPT_INC_MODE;
 575   2                              lcdMsg("Ïû·ÑÄ£Ê½", 1, 3 );
 576   2                              break;
 577   2      
 578   2                      case KEY_2:
 579   2                              OptMode = OPT_ADD_MODE;
 580   2                              lcdMsg("³äÖµÄ£Ê½", 1, 3 );
 581   2                              break;
 582   2      
 583   2                      case KEY_3:
 584   2                              OptMode = OPT_READ_MODE;
 585   2                              lcdMsg("¶Á¿¨Ä£Ê½", 1, 3 );
 586   2                              break;
 587   2      
 588   2                      case KEY_4:
 589   2                              OptMode = OPT_REG_MODE;
 590   2                              lcdMsg("¿ª¿¨Ä£Ê½", 1, 3 );
 591   2                              break;
 592   2      
 593   2                      default:
 594   2                              break;
 595   2              }
 596   1      
 597   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
 598   1              {
 599   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:50:21 PAGE 11  

 600   2                      {
 601   3                              display_no_id();
 602   3                              return;
 603   3                      }       
 604   2              }
 605   1      
 606   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
 607   1              {
 608   2                      display_no_id();
 609   2                      return; 
 610   2              }
 611   1      
 612   1              if( PcdSelect( &CardRevBuf[2] ) != MI_OK )//Ñ¡¿¨
 613   1              {
 614   2                      display_no_id();
 615   2                      return;
 616   2              }
 617   1              display_id( &CardRevBuf[2] );
 618   1      
 619   1              cal_keyA( CardKeyABuf );                //¼ÆËãÃÜÂë
 620   1      
 621   1              switch( OptMode )
 622   1              {
 623   2                      case OPT_REG_MODE:                      //ÐÂ¿¨×¢²á
 624   2                              if( PcdAuthState( PICC_AUTHENT1A, 4, DefaultKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 625   2                              {
 626   3                                      display_error();        
 627   3                                      return; 
 628   3                              }
 629   2                              memset( CardWriteBuf, 0, 16 );
 630   2                              if( PcdWrite( 4, CardWriteBuf ) != MI_OK )// Ð´¿¨
 631   2                              {
 632   3                                      display_error();
 633   3                                      return; 
 634   3                              }
 635   2                              memcpy( CardWriteBuf, CardKeyABlockBuf, 16 );
 636   2                              memcpy( CardWriteBuf, CardKeyABuf, 6 );
 637   2                              if( PcdWrite( 7, CardWriteBuf ) != MI_OK )// ÐÞ¸ÄÃÜÂë
 638   2                              {
 639   3                                      display_error();
 640   3                                      return; 
 641   3                              }
 642   2                              lcdMsg("×¢²á³É¹¦", 1, 3);
 643   2                              bPass = 1;
 644   2                              break;
 645   2                                      
 646   2                      case OPT_ADD_MODE:              //³äÖµ·½Ê½
 647   2                              if( PcdAuthState( PICC_AUTHENT1A, 4, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 648   2                              {
 649   3                                      display_error();
 650   3                                      return; 
 651   3                              }
 652   2                              if( PcdRead( 4, CardReadBuf ) != MI_OK )// ¶ÁÊý¾Ý
 653   2                              {
 654   3                                      display_error();
 655   3                                      return; 
 656   3                              }
 657   2                              memcpy( ( INT8U * )&CardMoney, CardReadBuf, 4 ); 
 658   2                              CardMoney += CARDADD;                   //³äÖµÔö¼Ó100
 659   2                              memset( CardWriteBuf, 0, 16 );
 660   2                              memcpy( CardWriteBuf, ( INT8U * )&CardMoney, 4 ); 
 661   2                              if( PcdWrite( 4, CardWriteBuf ) != MI_OK )// Ð´Êý¾Ý
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:50:21 PAGE 12  

 662   2                              {
 663   3                                      display_error();
 664   3                                      return; 
 665   3                              }
 666   2                              display_money( CardMoney );
 667   2                              bPass = 1;
 668   2                              break;
 669   2                              
 670   2                      case OPT_INC_MODE:              //Ïû·Ñ·½Ê½
 671   2                              if( PcdAuthState( PICC_AUTHENT1A, 4, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 672   2                              {
 673   3                                      display_error();
 674   3                                      return; 
 675   3                              }
 676   2                              if( PcdRead( 4, CardReadBuf ) != MI_OK )// ¶ÁÊý¾Ý
 677   2                              {
 678   3                                      display_error();
 679   3                                      return; 
 680   3                              }
 681   2                              memcpy( ( INT8U * )&CardMoney, CardReadBuf, 4 ); 
 682   2                              if( CardMoney < 8 )
 683   2                              {
 684   3                                      display_error();
 685   3                                      bWarn = 1;
 686   3                                      return;
 687   3                              }
 688   2                              CardMoney -= CARDREDUCE;        //Ïû·Ñ -8
 689   2                              memset( CardWriteBuf, 0, 16 );
 690   2                              memcpy( CardWriteBuf, ( INT8U * )&CardMoney, 4 ); 
 691   2                              if( PcdWrite( 4, CardWriteBuf ) != MI_OK )// Ð´Êý¾Ý
 692   2                              {
 693   3                                      display_error();
 694   3                                      return; 
 695   3                              }
 696   2                              display_money( CardMoney );
 697   2                              bPass = 1;
 698   2                              break;  
 699   2                              
 700   2                      case OPT_READ_MODE:             //¶Á¿¨·½Ê½
 701   2                              if( PcdAuthState( PICC_AUTHENT1A, 4, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 702   2                              {
 703   3                                      display_error();
 704   3                                      return; 
 705   3                              }
 706   2                              if( PcdRead( 4, CardReadBuf ) != MI_OK )// ¶ÁÊý¾Ý
 707   2                              {
 708   3                                      display_error();
 709   3                                      return; 
 710   3                              }
 711   2                              memcpy( ( INT8U * )&CardMoney, CardReadBuf, 4 ); 
 712   2                              display_money( CardMoney );
 713   2                              bPass = 1;
 714   2                              break;                                                                                                 
             -                                                                                                                        
             -                                                                                                                        
             -                                                                                                                        
             -                                                                                                                        
             -                 
 715   2                              
 716   2                      default:
 717   2                              break;
 718   2              }
C51 COMPILER V7.50   CTRL                                                                  04/26/2018 21:50:21 PAGE 13  

 719   1              PcdHalt();      
 720   1      }
 721          
 722          void ctrl_process( void )
 723          {
 724   1      
 725   1              if( CtrlMode == CTRL_PC_MODE )
 726   1              {
 727   2                      pc_process();
 728   2              }
 729   1              else if( CtrlMode == CTRL_BOARD_MODE )
 730   1              {
 731   2                      board_process();
 732   2              }
 733   1      
 734   1              if( bPass )
 735   1              {
 736   2                      bPass = 0;
 737   2                      pass(); 
 738   2      
 739   2              }
 740   1              if( bWarn )
 741   1              {
 742   2                      bWarn = 0;
 743   2                      warn();
 744   2              }
 745   1      }
 746          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3728    ----
   CONSTANT SIZE    =    121    ----
   XDATA SIZE       =     48     177
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
